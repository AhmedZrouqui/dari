// =========================================
// Dari Application Prisma Schema
// Version: 1.3
// Change: Separated User/Profile. Added RefreshToken model.
// =========================================

generator client {
    provider = "prisma-client-js"
    output   = "../client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// -----------------------------------------
// AUTH & CORE MODELS
// -----------------------------------------

model User {
    id        String   @id @default(uuid())
    email     String   @unique
    password  String // Hashed password
    isActive  Boolean  @default(true)
    role      Role     @default(USER)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    profile             Profile? // A user has one profile
    memberships         Membership[]
    sessions            Session[]
    ownedOrganization   Organization?        @relation("Owner")
    investments         Investment[]
    uploadedDocuments   Document[]           @relation("Uploader")
    authoredUpdates     ProjectUpdate[]      @relation("Author")
    passwordResetTokens PasswordResetToken[]
    refreshTokens       RefreshToken[] // A user can have multiple refresh tokens

    @@index([email])
}

// NEW: Profile model for user information
model Profile {
    id        String   @id @default(uuid())
    name      String
    userId    String   @unique
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model RefreshToken {
    id        String   @id @default(uuid())
    tokenHash String   @unique
    expiresAt DateTime
    createdAt DateTime @default(now())

    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model Organization {
    id        String   @id @default(uuid())
    name      String   @unique
    ownerId   String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    owner    User         @relation("Owner", fields: [ownerId], references: [id])
    members  Membership[]
    projects Project[]
}

model Membership {
    id             String   @id @default(uuid())
    userId         String
    organizationId String
    role           OrgRole  @default(MEMBER)
    joinedAt       DateTime @default(now())

    user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

    @@unique([userId, organizationId])
    @@index([organizationId])
}

model Session {
    id        String   @id @default(uuid())
    userId    String
    token     String   @unique
    createdAt DateTime @default(now())
    expiresAt DateTime

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
    @@index([expiresAt])
}

model PasswordResetToken {
    id        String   @id @default(uuid())
    tokenHash String   @unique
    expiresAt DateTime
    createdAt DateTime @default(now())
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

// ... (Other models: Project, Investment, etc. remain unchanged)
model Project {
    id                 String        @id @default(uuid())
    name               String
    address            String?
    description        String?
    totalBudget        Decimal       @db.Decimal(18, 2)
    expectedCompletion DateTime?
    status             ProjectStatus @default(PLANNING)
    heroImageUrl       String?
    createdAt          DateTime      @default(now())
    updatedAt          DateTime      @updatedAt

    organizationId String
    organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

    milestones  Milestone[]
    updates     ProjectUpdate[]
    documents   Document[]
    investments Investment[]
    expenses    Expense[]

    @@index([organizationId])
}

model Investment {
    id               String   @id @default(uuid())
    amount           Decimal  @db.Decimal(18, 2)
    equityPercentage Float
    investedAt       DateTime @default(now())

    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Restrict)

    projectId String
    project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

    @@unique([userId, projectId])
    @@index([projectId])
    @@index([userId])
}

model Milestone {
    id          String          @id @default(uuid())
    name        String
    description String?
    status      MilestoneStatus @default(PENDING)
    targetDate  DateTime?
    order       Int

    projectId String
    project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

    @@index([projectId])
}

model ProjectUpdate {
    id        String   @id @default(uuid())
    title     String
    content   String   @db.Text
    createdAt DateTime @default(now())

    projectId String
    project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

    authorId String
    author   User   @relation("Author", fields: [authorId], references: [id], onDelete: Restrict)

    attachments Document[]

    @@index([projectId])
}

model Expense {
    id          String   @id @default(uuid())
    description String
    amount      Decimal  @db.Decimal(18, 2)
    category    String
    vendor      String?
    expenseDate DateTime
    createdAt   DateTime @default(now())

    projectId String
    project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

    invoiceId  String?   @unique
    invoiceDoc Document? @relation("Invoice", fields: [invoiceId], references: [id], onDelete: SetNull)

    @@index([projectId])
}

model Document {
    id         String             @id @default(uuid())
    fileName   String
    fileType   String
    url        String
    size       Int
    visibility DocumentVisibility @default(INTERNAL)
    uploadedAt DateTime           @default(now())

    projectId String
    project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

    uploaderId String
    uploader   User   @relation("Uploader", fields: [uploaderId], references: [id], onDelete: Restrict)

    projectUpdateId String?
    projectUpdate   ProjectUpdate? @relation(fields: [projectUpdateId], references: [id], onDelete: SetNull)

    expenseInvoice Expense? @relation("Invoice")

    @@index([projectId])
    @@index([projectUpdateId])
}

// -----------------------------------------
// ENUMS
// -----------------------------------------

enum Role {
    USER
    ADMIN
    SUPERADMIN
}

enum OrgRole {
    OWNER
    ADMIN
    MEMBER
}

enum ProjectStatus {
    PLANNING
    IN_PROGRESS
    ON_HOLD
    COMPLETED
    CANCELLED
}

enum MilestoneStatus {
    PENDING
    IN_PROGRESS
    COMPLETED
}

enum DocumentVisibility {
    INTERNAL
    ALL_INVESTORS
}
